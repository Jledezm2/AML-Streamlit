# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z7FBcFQsr6XAZS6aKXMlLRjKHBIohOvD
"""

# Install Streamlit
!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score

# Title of the App
st.title("Sports Betting Model: Predicting Game Outcomes")

# Load Dataset
st.header("Step 1: Load Data")
uploaded_file = st.file_uploader("Upload your dataset", type=["csv"])

if uploaded_file is not None:
    # Read the dataset
    BetData = pd.read_csv(uploaded_file)
    st.write("Dataset Preview:")
    st.dataframe(BetData.head())

    # Feature Selection
    st.header("Step 2: Feature Engineering")
    X = BetData[['MLodds-A', 'MLodds-H', 'SPRodds-A', 'SPRodds-H', 'SPRline', 'OUline']]
    X['SPRline_OUline'] = X['SPRline'] * X['OUline']
    y = BetData['Win-H']

    # Train/Test Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Model Training
    st.header("Step 3: Model Training")
    rf_model = RandomForestClassifier(n_estimators=200, max_depth=30, min_samples_split=2, min_samples_leaf=1, bootstrap=False, random_state=42)
    rf_model.fit(X_train, y_train)
    y_pred = rf_model.predict(X_test)

    # Display Metrics
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    st.write(f"**Model Accuracy:** {accuracy:.2f}")
    st.write(f"**Model F1-Score:** {f1:.2f}")

    # Feature Importance
    feature_importances = pd.DataFrame({'Feature': X.columns, 'Importance': rf_model.feature_importances_})
    st.write("Feature Importances:")
    st.dataframe(feature_importances.sort_values(by='Importance', ascending=False))

    # Prediction Section
    st.header("Step 4: Make Predictions")
    st.write("Enter values for the features below:")
    MLodds_A = st.number_input("Money Line Odds (Away Team)", value=-110)
    MLodds_H = st.number_input("Money Line Odds (Home Team)", value=-110)
    SPRodds_A = st.number_input("Spread Odds (Away Team)", value=-110)
    SPRodds_H = st.number_input("Spread Odds (Home Team)", value=-110)
    SPRline = st.number_input("Spread Line", value=3)
    OUline = st.number_input("Over/Under Line", value=45.5)

    if st.button("Predict Outcome"):
        input_features = np.array([MLodds_A, MLodds_H, SPRodds_A, SPRodds_H, SPRline, OUline, SPRline * OUline]).reshape(1, -1)
        prediction = rf_model.predict(input_features)
        outcome = "Home Team Wins" if prediction[0] == 1 else "Away Team Wins"
        st.write(f"Prediction: **{outcome}**")

# Footer
st.write("Built with ❤️ for Applied Machine Learning.")

!streamlit run app.py